<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.litbo.hospital.check_before_use.dao.CheckBeforeUseDAO">
  <resultMap id="BaseResultMap" type="com.litbo.hospital.check_before_use.pojo.CheckBeforeUse">
    <result column="id" jdbcType="INTEGER" property="id" />
    <result column="check_person" jdbcType="VARCHAR" property="checkPerson" />
    <result column="record_person" jdbcType="VARCHAR" property="recordPerson" />
    <result column="record_time" jdbcType="VARCHAR" property="recordTime" />
    <result column="projects" jdbcType="VARCHAR" property="projects" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="bm_name" jdbcType="VARCHAR" property="bmName" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, check_person, record_person, record_time, projects, "status", bm_name
  </sql>
  <select id="selectByExample" parameterType="com.litbo.hospital.check_before_use.pojo.CheckBeforeUseExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from hospital..check_before_use
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.litbo.hospital.check_before_use.pojo.CheckBeforeUseExample">
    delete from hospital..check_before_use
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.litbo.hospital.check_before_use.pojo.CheckBeforeUse">
    insert into hospital..check_before_use (check_person, record_person,
      record_time, projects, "status", 
      bm_name)
    values (#{checkPerson,jdbcType=VARCHAR}, #{recordPerson,jdbcType=VARCHAR},
      #{recordTime,jdbcType=VARCHAR}, #{projects,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, 
      #{bmName,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.litbo.hospital.check_before_use.pojo.CheckBeforeUse">
    insert into hospital..check_before_use
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="checkPerson != null">
        check_person,
      </if>
      <if test="recordPerson != null">
        record_person,
      </if>
      <if test="recordTime != null">
        record_time,
      </if>
      <if test="projects != null">
        projects,
      </if>
      <if test="status != null">
        "status",
      </if>
      <if test="bmName != null">
        bm_name,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="checkPerson != null">
        #{checkPerson,jdbcType=VARCHAR},
      </if>
      <if test="recordPerson != null">
        #{recordPerson,jdbcType=VARCHAR},
      </if>
      <if test="recordTime != null">
        #{recordTime,jdbcType=VARCHAR},
      </if>
      <if test="projects != null">
        #{projects,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="bmName != null">
        #{bmName,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.litbo.hospital.check_before_use.pojo.CheckBeforeUseExample" resultType="java.lang.Long">
    select count(*) from hospital..check_before_use
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update hospital..check_before_use
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.checkPerson != null">
        check_person = #{record.checkPerson,jdbcType=VARCHAR},
      </if>
      <if test="record.recordPerson != null">
        record_person = #{record.recordPerson,jdbcType=VARCHAR},
      </if>
      <if test="record.recordTime != null">
        record_time = #{record.recordTime,jdbcType=VARCHAR},
      </if>
      <if test="record.projects != null">
        projects = #{record.projects,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        "status" = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.bmName != null">
        bm_name = #{record.bmName,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update hospital..check_before_use
    set id = #{record.id,jdbcType=INTEGER},
      check_person = #{record.checkPerson,jdbcType=VARCHAR},
      record_person = #{record.recordPerson,jdbcType=VARCHAR},
      record_time = #{record.recordTime,jdbcType=VARCHAR},
      projects = #{record.projects,jdbcType=VARCHAR},
      "status" = #{record.status,jdbcType=VARCHAR},
      bm_name = #{record.bmName,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <select id="seeEqMessage" resultType="com.litbo.hospital.check_before_use.vo.EqInfoCheckBeforeUseVo">
    select i.eq_id as eqId , i.eq_name as eqName , i.eq_sbbh as eqSbbh ,i.eq_gg as eqGg,i.eq_xh as eqXh, i.eq_pp as eqPp ,c.eq_cxfl_name as eqCxflName , s.bm_name as eqBmName
    from eq_info as i , eq_cxfl as c,s_bm as s
    <where>
      <if test="bmName != null">
        s.bm_name like #{bmName} and
      </if>
      <if test="eqName != null">
        i.eq_name like #{eqName} and
      </if>
      <if test="eqNum != null">
        i.eq_sbbh like #{eqNum} and
      </if>
      i.eq_cxfl_id = c.eq_cxfl_id and i.eq_bmid = s.bm_id
    </where>
  </select>
</mapper>